from urllib.parse import uses_relative

from aiogram import Bot, Dispatcher, F, Router, types

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
import random

from sqlalchemy.util import await_only

import application.keyboard as kb
import application.database.reqests as rq
from application.database.models import GosuslugiTopic, SberTopic

router = Router()

"""-------------------------------------------------–§–£–ù–ö–¶–ò–ò –û–¢ –ê–î–ú–ò–ù–ê------------------------------------------------"""
"""------------------------------------------------------------------------------------------------------------------"""

@router.message(F.photo, Command('image'))
async def photo_handler(message: Message) -> None:
	"""–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–¥ —Å—Ç–æ–ª–±–µ—Ü task_pictures.picURL"""
	photo_data = message.photo[-1]
	print(photo_data.file_id)

@router.message(F.audio | F.voice)
# @router.message(Command('audio'))
async def audio_or_voice_handler(message: Message) -> None:
	"""–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–¥ —Å—Ç–æ–ª–±–µ—Ü task_audio.audioLINK"""
	file_id = message.audio.file_id if message.audio else message.voice.file_id
	print(file_id)

@router.message(Command('54798_user.info'))
async def tasks(message: Message):
	all_users = await rq.get_users()
	count = 0
	for task in all_users: count += 1
	await message.answer(f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

@router.message(Command('help'))
async def cmd_help(message: Message, bot: Bot):
	sent_message = await message.answer(
		'–ü–û–ú–û–©–¨!! !! \n –¢—ã –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏!\n–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å',
		reply_markup=kb.command_help)

"""------------------------------------------------------------------------------------------------------------------"""
"""------------------------------------------------------------------------------------------------------------------"""

@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
	await rq.set_user(message.from_user.id)
	await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ—Å—Ç—å –≤ –±–æ—Ç CyberSaver!\n–≠—Ç–æ—Ç –±–æ—Ç - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ù–ì–£, '
						 '–ø–æ–º–æ–≥–∞—é—â–∞—è –±–æ—Ä—å–±–µ —Å –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!\n'
						 '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –æ–≥—Ä–æ–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç '
						 '–ª—é–±—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–º–∞–Ω—ã–≤–∞—Ç—å –ª—é–¥–µ–π –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Å–µ–±–µ –∏—Ö –∏–º—É—â–µ—Å—Ç–≤–æ –∏ –¥–∞–Ω–Ω—ã–µ.\n'
						 '–ú—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—â–∏—â–∞—Ç—å—Å—è –≤ –°–µ—Ç–∏, –∞ –≤ —Å–ª—É—á–∞–µ –±–µ–¥—ã'
						 '—É–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–∏–≤—É—é—Å—è —Å–∏—Ç—Ü–∞—Ü–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –∏ —Å–æ–∑–¥–∞–Ω –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!\n')
	sent_message = await message.answer('–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä, –∏–º–µ—é—â–∏–π —Ç—Ä–∏ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π:'
						 '–ê—É–¥–∏–æ-, –°–∫—Ä–∏–Ω- –∏ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º—ã. –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–ø–æ—Ä–¥—Ä–æ–±–Ω–µ–µ:\n'
						 '–í —Ä–µ–∂–º–µ –ê–£–î–ò–û –≤–∞–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞—Å—Ç–æ—è—â–∏–µ –æ–Ω–∏ –∏–ª–∏ —Ñ–µ–π–∫–æ–≤—ã–µ.\n'
						 '–í —Ä–µ–∂–∏–º–µ –°–ö–†–ò–ù, –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–Ω –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å,'
						 '–º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n –í —Ä–µ–∂–∏–º–µ –¢–ï–ö–°–¢–∞ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é, –∏ —Ä–µ—à–∏—Ç—å, '
						 '–Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –ø—Ä–∞–≤–¥–∏–≤–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏—Ç—å –∫—Ä—É–≥–æ–∑–æ—Ä, –∑–∞—à–∞—Ä–∏—Ç—å –∑–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
						 ', —á—Ç–æ–±—ã –Ω–µ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º –º–æ—à–µ–Ω–Ω–∏–∫–∞–º–∏, –∏ –Ω–µ –¥–∞—Ç—å —Å–µ–±—è –ø—Ä–æ–≤–µ—Å—Ç–∏!\n'
						 '–ö—Å—Ç–∞—Ç–∏,'
						 '–±–æ—Ç —Å–∞–º –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∞—à–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞!')
	await bot.pin_chat_message(chat_id=message.chat.id, message_id=sent_message.message_id, disable_notification=True)
	await message.answer('–ó–≤—É—á–∏—Ç —Å–ª–æ–∂–Ω–æ–≤–∞—Ç–æ, –æ–¥–Ω–∞–∫–æ —ç—Ç–æ –ª–∏—à—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!',
						 reply_markup = kb.command_start)

@router.message(F.text == '–û –ø—Ä–æ–µ–∫—Ç–µ CyberSaver')
async def cmd_about_project(message: Message):
	sent_message = await message.answer('–ü—Ä–æ–µ–∫—Ç CyberSaver —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –ú–ú–§ –ù–ì–£. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ '
										'—Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–µ–≥–æ –ª—é–¥—è–º —Å–µ—Ä–µ–±—Ä—è–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ '
										'–Ω–∞–≤—ã–∫–∏ –±–æ—Ä—å–±—ã —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º –≤ —Å–µ—Ç–∏. CyberSaver —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—á–µ–±–Ω–∏–∫-—Ç—Ä–µ–Ω–∞–∂–µ—Ä'
										'–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Telegram. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è Telegram - –±–æ—Ç —Å '
										'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏ —Ç–µ–æ—Ä–∏–∏ –ø–æ —Ç–µ–º–µ, —Ç–µ—Å—Ç–∞–º–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏  –Ω–µ—Å–æ–∫–ª—å–∫–∏—Ö —Ç–∏–ø–æ–≤'
										'—Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏.')

@router.message(F.text == '–ù–∞—á–∞—Ç—å —É—á–∏—Ç—å—Å—è!')
@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨Ö')
async def cmd_about_project(message: Message):
	await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏,'
										'–ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏, –∞ —Ç–∞–∫ –∂–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é!',
										reply_markup=kb.main)

@router.message(F.text == 'üßê–î–ª—è –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Öüßê')
async def cmd_curious(message: Message):
	await message.answer('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –∑–∞—â–∏—â–∞—Ç—å—Å—è –æ—Ç —Å–∞–º—ã—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–æ–≤'
										'–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞, –ø–æ—Å–ª—É—à–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π, –æ–±–º–∞–Ω—É—Ç—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞–º–∏,'
										'–ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–∏–µ–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!', reply_markup=kb.for_curious_home)

@router.message(F.text == 'üòû–ü–æ–º–æ—â—åüòû')
async def cmd_curious(message: Message):
	await message.answer('—á–µ–∫ –∑–∞–∫—Ä–µ–ø —Ö–∑\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É, –ø–∏—à–∏—Ç–µ @Dj_arbuzzzzzzz',
						 reply_markup=kb.for_curious_home)


"""--------------------trainig parth--------------------------------"""

topics = ["sber", "gosuslugi"]

@router.message(F.text == 'üí™–£–ß–ò–¢–¨–°–Ø!!!üí™')
async def start_practice_callback(message: Message, state: FSMContext):
	await message.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!', reply_markup=kb.emergency_exit)
	current_topic = random.choice(topics)
	await load_questions_for_topic(state, current_topic)
	await send_question(message, state)


async def load_questions_for_topic(state: FSMContext, topic: str):
	if topic == "sber":
		topic_tasks = await rq.get_sber_topic_tasks()
	else:
		topic_tasks = await rq.get_gosuslugi_topic_tasks()

	task_list = list(topic_tasks)
	await state.update_data(current_topic=topic, question_count=0, topic_questions=task_list)

async def send_question(message: Message, state: FSMContext):
	data = await state.get_data()
	question_count = data.get("question_count", 0)
	topic_questions = data.get("topic_questions", [])
	current_topic = data.get("current_topic")
	last_message_id = data.get("last_message_id")

	search_class = {
		"gosuslugi": [GosuslugiTopic, "–û–ü–ê–°–ù–û–°–¢–¨ –° –ì–û–°–£–°–õ–£–ì!!"],
		"sber": [SberTopic, "–í–ó–õ–û–ú –û–ù–õ–ê–ô–ù –ö–û–®–ï–õ–¨–ö–ê!!!"],
	}

	if question_count >= 5 or not topic_questions:
		await message.answer('-----------------–ö–û–ù–ï–¶ –¢–û–ü–ò–ö–ê-----------------------')
		await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã —É–ª—É—á—à–∏–ª–∏ —Å–≤–æ—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤!'
							 '–£ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ—á—Ç–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —à–∞–Ω—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å!')
		new_topic = random.choice([t for t in topics if t != current_topic])
		await load_questions_for_topic(state, new_topic)
		data = await state.get_data()
		topic_questions = data.get("topic_questions", [])
		current_topic = data.get("current_topic")
		question_count = 0
		await message.answer(f'–î–∞–≤–∞–π—Ç–µ –ø–æ—Ä–µ—à–∞–µ–º –Ω–∞ –Ω–æ–≤—É—é —Ç–µ–º—É! –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –≤–∞–º –∏–¥–µ—è: {search_class[current_topic][1]}')

	if not topic_questions:
		await message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return

	task = random.choice(topic_questions)
	await state.update_data(correct_answer=task.task_answer, right_comment=task.task_right_comment,
							wrong_comment=task.task_wrong_comment, question_count=question_count + 1)

	if last_message_id:
		try:
			await message.bot.edit_message_reply_markup(chat_id=message.chat.id,
														message_id=last_message_id,
														reply_markup=None)
		except Exception as e:
			print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ inline-–∫–Ω–æ–ø–æ–∫: {e}")

	answer_options = await rq.get_answer_options(task.task_id, search_class[current_topic][0])

	buttons = [
		InlineKeyboardButton(text=option, callback_data=f"answer_{index}")
		for index, option in enumerate(answer_options)
	]

	n = len(buttons)
	if n == 2:
		rows = [buttons[:2]]
	elif n == 3:
		rows = [buttons[:2], buttons[2:]]
	elif n == 4:
		rows = [buttons[:2], buttons[2:4]]
	elif n == 5:
		rows = [buttons[:2], buttons[2:4], buttons[4:]]
	elif n == 6:
		rows = [buttons[:2], buttons[2:4], buttons[4:]]
	else:
		rows = [[btn] for btn in buttons]

	keyboard = InlineKeyboardMarkup(inline_keyboard=rows)


	try:
		if task.task_link and task.task_link != "null":
			if task.task_type == "pic":
				sent_message = await message.answer_photo(task.task_link, caption=task.task_text, reply_markup=keyboard)
			elif task.task_type == "aud":
				sent_message = await message.answer_voice(task.task_link, caption=task.task_text, reply_markup=keyboard)
			else:
				sent_message = await message.answer(task.keyboard, reply_markup=keyboard)

		else:
			await message.answer(
				"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
				"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º.\n "
				"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!"
			)
			sent_message = await message.answer(f'**–ó–∞–¥–∞–Ω–∏–µ**:\n{task.task_text}', reply_markup=keyboard)

		await state.update_data(last_message_id=sent_message.message_id)

	except Exception as e:
		print(f'–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {task.task_type}: {e}\n'
			  f'{task.task_id} || {task.task_text} || {task.task_link}')

@router.callback_query(F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
	await callback.answer()
	data = await state.get_data()
	correct_answer = data.get("correct_answer")
	right_comment = data.get("right_comment")
	wrong_comment = data.get("wrong_comment")

	callback_data = callback.data
	answer_index = int(callback_data.split("_")[1])

	if correct_answer == answer_index:
		response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{right_comment}"
	else:
		response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{wrong_comment}"

	await callback.message.answer(response)
	await send_question(callback.message, state)

@router.callback_query(F.data == "continue_practice")
async def continue_practice(callback: CallbackQuery, state: FSMContext):
	await callback.message.delete()
	await send_question(callback.message, state)
